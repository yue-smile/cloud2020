server:
  port: 7003

eureka:
  instance:
    hostname: eureka7003.com #rureka服务端实例名称
  client:
   #表示不向注册中心注册自己
   register-with-eureka: false
   #表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
   fetch-registry: false
   service-url:
    defaultZone: http://eureka7003.com:7003/eureka/
  server:
    enable-self-preservation: false

#单点故障 高可用
#eureka集群：互相注册、相互守望
#
#自我保护机制：
#    默认情况下，如果EurekaServer在一定时间内没有接受到某个微服务实例的心跳，EurekaServer将会注销该实例（默认90秒）。
#    但是当网络发生故障时（延时、卡顿、拥挤等），微服务与EurekaServer之间无法正常通信，以上行为就变得危险，因为微服务本来是健康的，此时不应该注销这个微服务。
#    Eureka通过“自我保护模式”来解决这个问题--当EurekaServer节点在短时间内丢失过多客户端时（可能网络分区发生故障），该EurekaServer节点进入自我保护模式，不再注销任何服务实例
#
# 默认是开启
# eureka.server.enable-self-preservation: true
#
# Eureka为什么会产生自我保护？
#   为了防止EurekaClient可以正常运行，但是与EurekaServer网络不通的情况下，EurekaServer不会立刻将EurekaClient移除
#
#Eureka自我保护的产生原因：
#Eureka在运行期间会统计心跳失败的比例，在15分钟内是否低于85%,
#如果出现了低于的情况，Eureka Server会将当前的实例注册信息保护起来，
#同时提示一个警告，一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，
#不再删除服务注册表中的数据。也就是不会注销任何微服务。

